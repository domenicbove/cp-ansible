---
- include_role:
    name: confluent.common
  when: not common_role_completed|bool

# Install Packages
- name: Install the Schema Registry Packages
  yum:
    name: "{{item}}{{confluent_package_redhat_suffix}}"
    state: latest
  loop: "{{schema_registry_packages}}"
  when: ansible_os_family == "RedHat"

- name: Install the Schema Registry Packages
  apt:
    name: "{{item}}{{confluent_package_debian_suffix}}"
  loop: "{{schema_registry_packages}}"
  when: ansible_os_family == "Debian"

# Configure environment
- name: Schema Registry Group
  group:
    name: "{{schema_registry.group}}"

- name: Schema Registry User
  user:
    name: "{{schema_registry.user}}"
    comment: "Schema Registry User"
    system: yes
    group: "{{schema_registry.group}}"

- include_role:
    name: confluent.ssl
  vars:
    truststore_storepass: "{{schema_registry_truststore_storepass}}"
    truststore_path: "{{schema_registry_truststore_path}}"
    keystore_path: "{{schema_registry_keystore_path}}"
    keystore_storepass: "{{schema_registry_keystore_storepass}}"
    keystore_keypass: "{{schema_registry_keystore_keypass}}"
    service_name: schema_registry
    hostnames: "{{ [inventory_hostname] }}"
  when: schema_registry_ssl_enabled|bool or kafka_broker_listeners[schema_registry_kafka_listener_name]['ssl_enabled'] | default(ssl_enabled) | bool

- name: Configure Kerberos
  include_role:
    name: confluent.kerberos
  vars:
    kerberos_group: "{{schema_registry.group}}"
    kerberos_user: "{{schema_registry.user}}"
    kerberos_keytab_path: "{{schema_registry_kerberos_keytab_path}}"
    kerberos_handler: "restart schema-registry"
  when: kafka_broker_listeners[schema_registry_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'GSSAPI'

## RBAC Configuration

# - name: Create pem file Directory
#   file:
#     path: "{{rbac_enabled_public_pem_path}}"
#     group: "{{kafka_broker.group}}"
#     mode: '650'
#     recurse: yes
#   when: rbac_enabled|bool

- name: Copy in public pem files
  copy:
    src: "{{rbac_public_pem_file}}"
    dest: /var/ssl/private/public.pem
    mode: '755'
    owner: "{{kafka_broker.user}}"
    group: "{{kafka_broker.group}}"
  when: rbac_enabled|bool

- name: Get Kafka Cluster ID from Zookeeper
  delegate_to: "{{ groups['zookeeper'][0] }}"
  shell: |
    /bin/zookeeper-shell localhost:2181 get /cluster/id 2> /dev/null | grep version | jq -r .id
  register: cluster_id
  when: rbac_enabled|bool

- name: export certificate to pem format for MDS login to create user
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  shell: |
    openssl pkcs12 -in /var/ssl/private/kafka_broker.keystore.jks \
      -out /var/ssl/private/kafka_broker.keystore.pem \
      -passin pass:{{kafka_broker_keystore_storepass}} -passout pass:{{kafka_broker_keystore_storepass}}
  when: rbac_enabled|bool and ssl_enabled|bool

- name: Login to MDS to get Security Token
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  delegate_facts: true
  shell: |
    curl -u "{{rbac_broker_admin}}":"{{rbac_broker_admin_password}}" -s http://localhost:8090/security/1.0/authenticate 2> /dev/null | grep auth_token | jq -r .auth_token
  register: rbac_token
  when: rbac_enabled|bool

## Configure users for RBAC with MTLS and self signed certificates

- name: Grant role Security Admin to Schema Registry user when using self signed certificates
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  delegate_facts: true
  shell: |
    curl -X POST http://{{ groups['kafka_broker'][0] }}:8090/security/1.0/principals/User:schema_registry/roles/SecurityAdmin -H "accept: application/json" -H "Authorization: Bearer {{rbac_token.stdout}}" -H "Content-Type: application/json" -d '{"clusters":{"kafka-cluster":"{{cluster_id.stdout}}","schema-registry-cluster":"schema-registry"}}"'
  when: (rbac_enabled|bool and ssl_enabled|bool) and not (ssl_custom_certs|bool)

- name: Grant schema registry ResourceOwner on the group that Schema Registry nodes use to coordinate across the cluster when using self signed certificates
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  delegate_facts: true
  shell: |
    curl -X POST http://{{ groups['kafka_broker'][0] }}:8090/security/1.0/principals/User:schema_registry/roles/ResourceOwner/bindings -H "accept: application/json" -H "Authorization: Bearer {{rbac_token.stdout}}" -H "Content-Type: application/json" -d '{"scope":{"clusters":{"kafka-cluster": "{{cluster_id.stdout}}"}}, "resourcePatterns":[{"resourceType":"Group","name": "schema-registry","patternType":"LITERAL"}]}'
  when: (rbac_enabled|bool and ssl_enabled|bool) and not (ssl_custom_certs|bool)

- name: Grant schema registry ResourceOwner on the kafka topic where schemas are stored when using self signed certificates
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  delegate_facts: true
  shell: |
    curl http://{{ groups['kafka_broker'][0] }}:8090/security/1.0/principals/User:schema_registry/roles/ResourceOwner/bindings -X POST -d '{ "scope": {"clusters": {"kafka-cluster":"{{cluster_id.stdout}}"}}, "resourcePatterns": [{"resourceType": "Topic", "name": "_schemas" }]}' -H "Content-Type: application/json" -H "Authorization: Bearer {{rbac_token.stdout}}"
  when: (rbac_enabled|bool and ssl_enabled|bool) and not (ssl_custom_certs|bool)

## Configure users for RBAC with MTLS and custom certificates

- name: Grant role Security Admin to Schema Registry user when using custom certificates
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  delegate_facts: true
  shell: |
    curl -X POST http://{{ groups['kafka_broker'][0] }}:8090/security/1.0/principals/User:{{rbac_principal_name}}/roles/SecurityAdmin -H "accept: application/json" -H "Authorization: Bearer {{rbac_token.stdout}}" -H "Content-Type: application/json" -d '{"clusters":{"kafka-cluster": "{{cluster_id.stdout}}", "schema-registry-cluster": "schema-registry"}}"'
  when: rbac_enabled|bool and ssl_enabled|bool and ssl_custom_certs|bool

- name: Grant schema registry ResourceOwner on the group that Schema Registry nodes use to coordinate across the cluster when using custom certificates
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  delegate_facts: true
  shell: |
    curl -X POST http://{{ groups['kafka_broker'][0] }}:8090/security/1.0/principals/User:{{rbac_principal_name}}/roles/ResourceOwner/bindings -H "accept: application/json" -H "Authorization: Bearer {{rbac_token.stdout}}" -H "Content-Type: application/json" -d '{"scope":{"clusters":{"kafka-cluster": "{{cluster_id.stdout}}"}}, "resourcePatterns":[{"resourceType":"Group","name": "schema-registry","patternType":"LITERAL"}]}'
  when: rbac_enabled|bool and ssl_enabled|bool and ssl_custom_certs|bool

- name: Grant schema registry ResourceOwner on the kafka topic where schemas are stored when using custom certificates
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  delegate_facts: true
  shell: |
    curl http://{{ groups['kafka_broker'][0] }}:8090/security/1.0/principals/User:{{rbac_principal_name}}/roles/ResourceOwner/bindings -X POST -d '{ "scope": {"clusters": {"kafka-cluster":"{{cluster_id.stdout}}"}}, "resourcePatterns": [{"resourceType": "Topic", "name": "_schemas" }]}' -H "Content-Type: application/json" -H "Authorization: Bearer {{rbac_token.stdout}}"
  when: rbac_enabled|bool and ssl_enabled|bool and ssl_custom_certs|bool

- name: Remove exported pem file for MDS login
  file:
     path: /var/ssl/private/kafka_broker_keystore.pem
     state: absent
  when: rbac_enabled|bool and ssl_enabled|bool

- name: Create Schema Registry Config
  template:
    src: schema-registry.properties.j2
    dest: "{{schema_registry.config_file}}"
    mode: 0640
    owner: "{{schema_registry.user}}"
    group: "{{schema_registry.group}}"
  notify:
    - restart schema-registry

- name: Create Logs Directory
  file:
    path: "{{schema_registry.appender_log_path}}"
    state: directory
    group: "{{schema_registry.group}}"
    owner: "{{schema_registry.user}}"
    mode: '764'

- name: Create Schema Registry log4j Config
  template:
    src: schema_registry_log4j.properties.j2
    dest: "{{schema_registry.log4j_file}}"
    mode: 0640
    owner: "{{schema_registry.user}}"
    group: "{{schema_registry.group}}"
  notify:
    - restart schema-registry

- name: Create Service Override Directory
  file:
    path: "{{schema_registry.systemd_override | dirname}}"
    owner: "{{schema_registry.user}}"
    group: "{{schema_registry.group}}"
    state: directory
    mode: 0640

- name: Write Service Overrides
  template:
    src: override.conf.j2
    dest: "{{schema_registry.systemd_override}}"
    mode: 0640
    owner: "{{schema_registry.user}}"
    group: "{{schema_registry.group}}"
  notify:
    - reload systemd
    - restart schema-registry

- name: Certs were Updated - Trigger Restart
  command: /bin/true
  notify: restart schema-registry
  when: certs_updated|bool

- meta: flush_handlers

- name: Start Schema Registry Service
  systemd:
    name: "{{schema_registry_service_name}}"
    enabled: yes
    state: started

- name: Health Check
  include_tasks: health_check.yml
  when:
    - health_checks_enabled|bool
    - not ansible_check_mode
