---
# - include_role:
#     name: confluent.common
#   when: not common_role_completed|bool
#
# # Install Packages
# - name: Install the Control Center Packages
#   yum:
#     name: "{{item}}{{confluent_package_redhat_suffix}}"
#     state: latest
#   loop: "{{control_center_packages}}"
#   when: ansible_os_family == "RedHat"
#
# - name: Install the Control Center Packages
#   apt:
#     name: "{{item}}{{confluent_package_debian_suffix}}"
#   loop: "{{control_center_packages}}"
#   when: ansible_os_family == "Debian"
#
# # Configure environment
# - name: Create Control Center Group
#   group:
#     name: "{{control_center.group}}"
#
# - name: Create Control Center User
#   user:
#     name: "{{control_center.user}}"
#     comment: "Control Center User"
#     system: yes
#     group: "{{control_center.group}}"
#
# - name: Set Control Center Data Dir permissions
#   file:
#     path: "{{control_center.properties['confluent.controlcenter.data.dir']}}"
#     owner: "{{control_center.user}}"
#     group: "{{control_center.group}}"
#     mode: 0755
#
# - include_role:
#     name: confluent.ssl
#   vars:
#     truststore_storepass: "{{control_center_truststore_storepass}}"
#     truststore_path: "{{control_center_truststore_path}}"
#     keystore_path: "{{control_center_keystore_path}}"
#     keystore_storepass: "{{control_center_keystore_storepass}}"
#     keystore_keypass: "{{control_center_keystore_keypass}}"
#     service_name: control_center
#     hostnames: "{{ [inventory_hostname] }}"
#   when: control_center_ssl_enabled|bool or kafka_broker_listeners[control_center_kafka_listener_name]['ssl_enabled'] | default(ssl_enabled) | bool
#
# - name: Configure Kerberos
#   include_role:
#     name: confluent.kerberos
#   vars:
#     kerberos_group: "{{control_center.group}}"
#     kerberos_user: "{{control_center.user}}"
#     kerberos_keytab_path: "{{control_center_kerberos_keytab_path}}"
#     kerberos_handler: "restart control center"
#   when: kafka_broker_listeners[control_center_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'GSSAPI'
#
# ## RBAC Configuration
# - name: Copy in public pem files
#   copy:
#     src: "{{rbac_public_pem_file}}"
#     dest: /var/ssl/private/public.pem
#     mode: '755'
#     owner: "{{kafka_broker.user}}"
#     group: "{{kafka_broker.group}}"
#   when: rbac_enabled|bool

# TODO deeper investigation into what the principals are!
- set_fact:
    control_center_principal: control_center

# # TODO finish this
# - name: Create Centralized ACLS
#   include_tasks: tasks/acls.yml
#   vars:
#     principal: "{{control_center_principal}}"
#     acls_list: "{{control_center_acls}}"
#   when: acls_enabled|bool

- name: Create RoleBindings for RBAC
  include_tasks: rolebindings.yml
  when: rbac_enabled|bool

# - name: Create Control Center Config
#   template:
#     src: control-center.properties.j2
#     dest: "{{control_center.config_file}}"
#     mode: 0640
#     owner: "{{control_center.user}}"
#     group: "{{control_center.group}}"
#   notify:
#     - restart control center
#
# - name: Create Logs Directory
#   file:
#     path: "{{control_center.appender_log_path}}"
#     state: directory
#     group: "{{control_center.group}}"
#     owner: "{{control_center.user}}"
#     mode: '764'
#
# - name: Create Control Center log4j Config
#   template:
#     src: control-center_log4j.properties.j2
#     dest: "{{control_center.log4j_file}}"
#     mode: 0640
#     owner: "{{control_center.user}}"
#     group: "{{control_center.group}}"
#   notify:
#     - restart control center
#
# - name: Create Service Override Directory
#   file:
#     path: "{{control_center.systemd_override | dirname}}"
#     state: directory
#     owner: "{{control_center.user}}"
#     group: "{{control_center.group}}"
#     mode: 0640
#
# - name: Write Service Overrides
#   template:
#     src: override.conf.j2
#     dest: "{{control_center.systemd_override}}"
#     mode: 0640
#     owner: "{{control_center.user}}"
#     group: "{{control_center.group}}"
#   notify:
#     - reload systemd
#     - restart control center
#
# - name: Certs were Updated - Trigger Restart
#   command: /bin/true
#   notify: restart control center
#   when: certs_updated|bool
#
# - meta: flush_handlers
#
# - name: Start Control Center Service
#   systemd:
#     name: "{{control_center_service_name}}"
#     enabled: yes
#     state: started
#
# - name: Health Check
#   include_tasks: health_check.yml
#   when:
#     - health_checks_enabled|bool
#     - not ansible_check_mode
