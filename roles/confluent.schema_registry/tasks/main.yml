# Install Packages
- name: Install the Schema Registry Packages
  yum:
    name: "{{item}}-{{confluent.package_version}}"
    state: latest
  loop: "{{schema_registry_packages}}"
  when: ansible_os_family == "RedHat"

- name: Install the Schema Registry Packages
  apt:
    name: "{{item}}={{confluent.package_version}}"
    update_cache: yes
  loop: "{{schema_registry_packages}}"
  when: ansible_os_family == "Debian"

# Configure environment
- name: Schema Registry Group
  group:
    name: "{{schema_registry.group}}"

- name: Schema Registry User
  user:
    name: "{{schema_registry.user}}"
    comment: "Schema Registry User"
    system: yes
    group: "{{schema_registry.group}}"

# need to get the principal name, below is just for scram
# could use set fact as to not repeat this code
- name: Create ACLS (SCRAM)
  shell: |
    kafka-acls --authorizer-properties zookeeper.connect=localhost:2181 --add \
      --allow-principal User:{{ sasl_scram_users.schema_registry.principal }} --allow-host '*' \
      --producer --consumer --topic _schemas --group schema-registry

    kafka-acls --authorizer-properties zookeeper.connect=localhost:2181 --add \
      --allow-principal User:{{ sasl_scram_users.schema_registry.principal }} --allow-host '*' \
      --producer --consumer --topic _schemas_acl --group schema-registry

    kafka-acls --authorizer-properties zookeeper.connect=localhost:2181 --add \
      --allow-principal User:{{ sasl_scram_users.schema_registry.principal }} --allow-host '*' \
      --operation DescribeConfigs --topic _schemas

    kafka-acls --authorizer-properties zookeeper.connect=localhost:2181 --add \
      --allow-principal User:{{ sasl_scram_users.schema_registry.principal }} --allow-host '*' \
      --operation DescribeConfigs --topic _schemas_acl

    kafka-acls --authorizer-properties zookeeper.connect=localhost:2181 --add \
      --allow-principal User:{{ sasl_scram_users.schema_registry.principal }} --allow-host '*' \
      --operation Describe --topic __consumer_offsets

    kafka-acls --authorizer-properties zookeeper.connect=localhost:2181 --add \
      --allow-principal User:{{ sasl_scram_users.schema_registry.principal }} --allow-host '*' \
      --operation Create --cluster kafka-cluster
  delegate_to: "{{ groups['zookeeper'][0] }}"
  run_once: true
  # should have a when
  # when: "'SCRAM-SHA-256' in kafka_broker_sasl_enabled_mechanisms"

      # kafka-acls --authorizer-properties zookeeper.connect=localhost:2181 --add \
      #   --allow-principal User:admin --allow-host '*' \
      #   --producer --consumer --topic  _confluent-metrics


- name: Create Keytabs Directory
  file:
    path: "{{kerberos.keytab_dir}}"
    group: "{{schema_registry.group}}"
    mode: '650'
    recurse: yes
  when: kafka_broker_listeners[schema_registry_kafka_listener_name]['sasl_protocol'] | normalize_sasl_protocol == 'GSSAPI'

- name: Copy in Keytab File
  copy:
    src: "{{schema_registry_kerberos_keytab_path}}"
    dest: "{{kerberos.keytab_dir}}/{{schema_registry_kerberos_keytab_path | basename}}"
    mode: '600'
    owner: "{{schema_registry.user}}"
    group: "{{schema_registry.group}}"
  when: kafka_broker_listeners[schema_registry_kafka_listener_name]['sasl_protocol'] | normalize_sasl_protocol == 'GSSAPI'

- name: Create Schema Registry Config
  template:
    src: schema-registry.properties.j2
    dest: "{{schema_registry.config_file}}"
    mode: 0640
    owner: "{{schema_registry.user}}"
    group: "{{schema_registry.group}}"
  notify:
    - restart schema-registry

- name: Create Logs Directory
  file:
    path: "{{schema_registry.appender_log_path}}"
    group: "{{schema_registry.group}}"
    owner: "{{schema_registry.user}}"
    mode: '764'
    recurse: yes

- name: Create Schema Registry log4j Config
  template:
    src: schema_registry_log4j.properties.j2
    dest: "{{schema_registry.log4j_file}}"
    mode: 0640
    owner: "{{schema_registry.user}}"
    group: "{{schema_registry.group}}"
  notify:
    - restart schema-registry

- name: Create Service Override Directory
  file:
    path: "{{schema_registry.systemd_override}}"
    owner: "{{schema_registry.user}}"
    group: "{{schema_registry.group}}"
    state: directory
    mode: 0640

- name: Write Service Overrides
  template:
    src: override.conf.j2
    dest: "{{schema_registry.systemd_override}}/override.conf"
    mode: 0640
    owner: "{{schema_registry.user}}"
    group: "{{schema_registry.group}}"
  notify:
    - reload systemd
    - restart schema-registry

- name: Certs were Updated - Trigger Restart
  command: /bin/true
  notify: restart schema-registry
  when: certs_updated|bool

- meta: flush_handlers

- name: Start Schema Registry Service
  systemd:
    name: "{{schema_registry.service_name}}"
    enabled: "{{schema_registry.systemd.enabled}}"
    state: "{{schema_registry.systemd.state}}"
