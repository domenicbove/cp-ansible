---
kerberos:
  keytab_dir: /etc/security/keytabs

confluent_repo_version: 5.5
confluent_package_version: 5.5.0
confluent_full_package_version: "{{ confluent_package_version + '-1' }}"
confluent_package_redhat_suffix: "{{ '-' + confluent_full_package_version if confluent_full_package_version != '' else ''}}"
confluent_package_debian_suffix: "{{ '=' + confluent_full_package_version if confluent_full_package_version != '' else ''}}"

confluent:
  support:
    customer_id: anonymous
    metrics_enabled: true

jolokia_enabled: true
jolokia_jar_path: /opt/jolokia/jolokia.jar

jmxexporter_enabled: false
jmxexporter_jar_path: /opt/prometheus/jmx_prometheus_javaagent.jar

fips_enabled: false
fips_jar_path: /usr/share/java/kafka/bc-fips-1.0.1.jar
fips_provider_class: org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider
pkcs12_enabled: "{{ true if fips_enabled|bool else false }}"

custom_log4j: true
custom_yum_repofile: false
custom_apt_repo: false
kerberos_configure: true

open_file_limit: 500000

confluent_server_enabled: true

health_checks_enabled: true

common_role_completed: false

proxy_env: {}

# Other options: kerberos, plain, scram
sasl_protocol: none

ssl_enabled: false
ssl_mutual_auth_enabled: false

regenerate_ca: true
regenerate_keystore_and_truststore: true
certs_updated: false

ssl_provided_keystore_and_truststore: false
ssl_custom_certs: false
# With self_signed on and ssl_enabled off, self_signed var should not get honored
self_signed: "{{ false if ssl_provided_keystore_and_truststore|bool or ssl_custom_certs|bool else true }}"
ssl_self_signed_ca_cert_filename: snakeoil-ca-1.crt
ssl_self_signed_ca_key_filename: snakeoil-ca-1.key
ssl_self_signed_ca_password: capassword123

### Zookeeper Variables ###
zookeeper_user: "{{zookeeper_default_user}}"
zookeeper_group: "{{zookeeper_default_group}}"
zookeeper:
  # properties:
  #   clientPort: 2181
  log4j_file: /etc/kafka/zookeeper_log4j.properties
  jaas_file: /etc/kafka/zookeeper_jaas.conf

zookeeper_sasl_protocol: "{{sasl_protocol if sasl_protocol == 'kerberos' else 'none'}}"

zookeeper_jolokia_enabled: "{{jolokia_enabled}}"
zookeeper_jolokia_port: 7770

zookeeper_jmxexporter_enabled: "{{jmxexporter_enabled}}"
zookeeper_jmxexporter_config_path: /opt/prometheus/zookeeper.yml
zookeeper_jmxexporter_port: 8079

zookeeper_health_check_command: "exec 42<>/dev/tcp/127.0.0.1/{{zookeeper_properties.clientPort}}; echo -e 'srvr' >&42; cat <&42"

zookeeper_custom_properties: {}

zookeeper_default_properties:
  clientPort: 2181
  maxClientCnxns: 0
  initLimit: 5
  syncLimit: 2
  autopurge.snapRetainCount: 10
  autopurge.purgeInterval: 1
  dataDir: /var/lib/zookeeper
  admin.enableServer: "false"

zookeeper_properties: "{{ zookeeper_default_properties | combine(zookeeper_custom_properties, recursive=True) }}"

zookeeper_sasl_kerberos_properties:
  authProvider.sasl: org.apache.zookeeper.server.auth.SASLAuthenticationProvider
  kerberos.removeHostFromPrincipal: 'true'
  kerberos.removeRealmFromPrincipal: 'true'

# Kafka Broker Variables
kafka_broker_default_listeners:
  internal:
    name: INTERNAL
    port: 9092
    ssl_enabled: "{{ ssl_enabled }}"
    ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"
    sasl_protocol: "{{ 'OAUTH' if rbac_enabled|bool else sasl_protocol }}"

kafka_broker_custom_listeners:
  broker:
    name: BROKER
    port: 9091
    ssl_enabled: "{{ ssl_enabled }}"
    ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"
    sasl_protocol: "{{ sasl_protocol }}"

kafka_broker_configure_additional_brokers: true
kafka_broker_listeners: "{{ kafka_broker_default_listeners | combine(kafka_broker_custom_listeners, recursive=True) if kafka_broker_configure_additional_brokers|bool else  kafka_broker_default_listeners}}"
kafka_broker_inter_broker_listener_name: "{{ 'broker' if kafka_broker_configure_additional_brokers|bool else 'internal' }}"

# Uses custom filter to create a list of all sasl_protocols, removes ['none'], and reduces to unique items
kafka_broker_sasl_enabled_mechanisms: "{{ kafka_broker_listeners | get_sasl_mechanisms(sasl_protocol) | difference(['none']) | unique }}"

kafka_broker_user: "{{kafka_broker_default_user}}"
kafka_broker_group: "{{kafka_broker_default_group}}"
kafka_broker_truststore_path: "/var/ssl/private/kafka_broker.truststore.jks"
kafka_broker_keystore_path: "/var/ssl/private/kafka_broker.keystore.jks"
kafka_broker_truststore_storepass: "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}"
kafka_broker_keystore_storepass: "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}"
kafka_broker_keystore_keypass: "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else kafka_broker_keystore_storepass }}"
kafka_broker_ca_cert_path: "/var/ssl/private/ca.crt"
kafka_broker_cert_path: "/var/ssl/private/kafka_broker.crt"
kafka_broker_key_path: "/var/ssl/private/kafka_broker.key"
kafka_broker:
  log4j_file: /etc/kafka/kafka_server_log4j.properties
  jaas_file: /etc/kafka/kafka_server_jaas.conf

kafka_broker_schema_validation_enabled: false

kafka_broker_jolokia_enabled: "{{jolokia_enabled}}"
kafka_broker_jolokia_port: 7771
kafka_broker_jolokia_ssl_enabled: "{{ ssl_enabled }}"
kafka_broker_jolokia_java_arg_ssl_addon: ",keystore={{kafka_broker_keystore_path}},keystorePassword={{kafka_broker_keystore_storepass}},protocol=https"
kafka_broker_jolokia_urp_url: "{{ 'https' if kafka_broker_jolokia_ssl_enabled|bool else 'http' }}://{{inventory_hostname}}:{{kafka_broker_jolokia_port}}/jolokia/read/kafka.server:type=ReplicaManager,name=UnderReplicatedPartitions"
kafka_broker_jolokia_active_controller_url: "{{ 'https' if kafka_broker_jolokia_ssl_enabled|bool else 'http' }}://{{inventory_hostname}}:{{kafka_broker_jolokia_port}}/jolokia/read/kafka.controller:type=KafkaController,name=ActiveControllerCount"

kafka_broker_jmxexporter_enabled: "{{jmxexporter_enabled}}"
kafka_broker_jmxexporter_config_path: /opt/prometheus/kafka.yml
kafka_broker_jmxexporter_port: 8080

# TODO should this be in the kafka role??
#no- there are times where some other components need to know of each others props
kafka_broker_default_interal_replication_factor: "{{ [ groups['kafka_broker'] | length, 3 ] | min }}"

kafka_broker_default_properties:
  group.initial.rebalance.delay.ms: 0
  log.retention.check.interval.ms: 300000
  log.retention.hours: 168
  log.segment.bytes: 1073741824
  num.io.threads: 16
  num.network.threads: 8
  num.partitions: 1
  num.recovery.threads.per.data.dir: 2
  offsets.topic.replication.factor: "{{kafka_broker_default_interal_replication_factor}}"
  socket.receive.buffer.bytes: 102400
  socket.request.max.bytes: 104857600
  socket.send.buffer.bytes: 102400
  transaction.state.log.min.isr: 2
  transaction.state.log.replication.factor: "{{kafka_broker_default_interal_replication_factor}}"
  zookeeper.connection.timeout.ms: 18000
  confluent.license.topic.replication.factor: "{{kafka_broker_default_interal_replication_factor}}"
  confluent.metadata.topic.replication.factor: "{{kafka_broker_default_interal_replication_factor}}"
  confluent.support.metrics.enable: "{{confluent.support.metrics_enabled|bool|lower}}"
  confluent.support.customer.id: "{{confluent.support.customer_id}}"
  zookeeper.connect: "{% for host in groups['zookeeper'] %}{% if loop.index > 1%},{% endif %}{{ host }}:{{zookeeper_properties.clientPort}}{% endfor %}"
  log.dirs: /var/lib/kafka/data
  # broker.id: "{{ broker_id | default(groups.kafka_broker.index(inventory_hostname) + 1)}}"
  listener.security.protocol.map: "{% for listener in kafka_broker_listeners|dict2items %}{% if loop.index > 1%},{% endif %}{{ listener['value']['name'] }}:{{ listener['value'] | kafka_protocol_defaults(ssl_enabled, sasl_protocol)}}{% endfor %}"
  listeners: "{% for listener in kafka_broker_listeners|dict2items %}{% if loop.index > 1%},{% endif %}{{ listener['value']['name'] }}://:{{ listener['value']['port'] }}{% endfor %}"
  advertised.listeners: "{% for listener in kafka_broker_listeners|dict2items %}{% if loop.index > 1%},{% endif %}{{ listener['value']['name'] }}://{{ listener['value']['hostname'] | default(inventory_hostname) }}:{{ listener['value']['port'] }}{% endfor %}"
  inter.broker.listener.name: "{{kafka_broker_listeners[kafka_broker_inter_broker_listener_name]['name']}}"

kafka_broker_custom_properties: {}
kafka_broker_properties: "{{ kafka_broker_default_properties | combine(kafka_broker_custom_properties, recursive=True) }}"



# Schema Registry Variables
schema_registry_user: "{{schema_registry_default_user}}"
schema_registry_group: "{{schema_registry_default_group}}"
schema_registry_listener_port: 8081
schema_registry_ssl_enabled: "{{ssl_enabled}}"
schema_registry_ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"
schema_registry_http_protocol: "{{ 'https' if schema_registry_ssl_enabled|bool else 'http' }}"
schema_registry_truststore_path: "/var/ssl/private/schema_registry.truststore.jks"
schema_registry_keystore_path: "/var/ssl/private/schema_registry.keystore.jks"
schema_registry_truststore_storepass: "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}"
schema_registry_keystore_storepass: "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}"
schema_registry_keystore_keypass: "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else schema_registry_keystore_storepass }}"
schema_registry_ca_cert_path: "/var/ssl/private/ca.crt"
schema_registry_cert_path: "/var/ssl/private/schema_registry.crt"
schema_registry_key_path: "/var/ssl/private/schema_registry.key"
schema_registry_kafka_listener_name: internal
schema_registry:
  log4j_file: /etc/schema-registry/schema_registry_log4j.properties

schema_registry_jolokia_enabled: "{{jolokia_enabled}}"
schema_registry_jolokia_port: 7772
schema_registry_jolokia_ssl_enabled: "{{ schema_registry_ssl_enabled }}"

schema_registry_default_properties:
  debug: false
  schema.registry.group.id: schema-registry
  kafkastore.topic: _schemas

schema_registry_custom_properties: {}
schema_registry_properties: "{{ schema_registry_default_properties | combine(schema_registry_custom_properties, recursive=True) }}"





# Kafka Rest Variables
kafka_rest_user: "{{kafka_rest_default_user}}"
kafka_rest_group: "{{kafka_rest_default_group}}"
kafka_rest_port: 8082
kafka_rest_ssl_enabled: "{{ssl_enabled}}"
kafka_rest_ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"
kafka_rest_http_protocol: "{{ 'https' if kafka_rest_ssl_enabled|bool else 'http' }}"
kafka_rest_truststore_path: "/var/ssl/private/kafka_rest.truststore.jks"
kafka_rest_keystore_path: "/var/ssl/private/kafka_rest.keystore.jks"
kafka_rest_truststore_storepass: "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}"
kafka_rest_keystore_storepass: "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}"
kafka_rest_keystore_keypass: "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else kafka_rest_keystore_storepass }}"
kafka_rest_ca_cert_path: "/var/ssl/private/ca.crt"
kafka_rest_cert_path: "/var/ssl/private/kafka_rest.crt"
kafka_rest_key_path: "/var/ssl/private/kafka_rest.key"
kafka_rest_kafka_listener_name: internal
kafka_rest:
  log4j_file: /etc/kafka-rest/kafka-rest_log4j.properties

kafka_rest_jolokia_enabled: "{{jolokia_enabled}}"
kafka_rest_jolokia_port: 7775
kafka_rest_jolokia_ssl_enabled: "{{ kafka_rest_ssl_enabled }}"

# Kafka Connect Variables
kafka_connect_user: "{{kafka_connect_default_user}}"
kafka_connect_group: "{{kafka_connect_default_group}}"
kafka_connect_rest_port: 8083
kafka_connect_ssl_enabled: "{{ssl_enabled}}"
kafka_connect_ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"
kafka_connect_http_protocol: "{{ 'https' if kafka_connect_ssl_enabled|bool else 'http' }}"
kafka_connect_truststore_path: "/var/ssl/private/kafka_connect.truststore.jks"
kafka_connect_keystore_path: "/var/ssl/private/kafka_connect.keystore.jks"
kafka_connect_truststore_storepass: "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}"
kafka_connect_keystore_storepass: "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}"
kafka_connect_keystore_keypass: "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else kafka_connect_keystore_storepass }}"
kafka_connect_ca_cert_path: "/var/ssl/private/ca.crt"
kafka_connect_cert_path: "/var/ssl/private/kafka_connect.crt"
kafka_connect_key_path: "/var/ssl/private/kafka_connect.key"
kafka_connect_kafka_listener_name: internal
kafka_connect:
  log4j_file: /etc/kafka/connect_distributed_log4j.properties

kafka_connect_jolokia_enabled: "{{jolokia_enabled}}"
kafka_connect_jolokia_port: 7773
kafka_connect_jolokia_ssl_enabled: "{{ kafka_connect_ssl_enabled }}"

# KSQL Variables
ksql_user: "{{ksql_default_user}}"
ksql_group: "{{ksql_default_group}}"
ksql_listener_port: 8088
ksql_ssl_enabled: "{{ssl_enabled}}"
ksql_ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"
ksql_http_protocol: "{{ 'https' if ksql_ssl_enabled|bool else 'http' }}"
ksql_truststore_path: "/var/ssl/private/ksql.truststore.jks"
ksql_keystore_path: "/var/ssl/private/ksql.keystore.jks"
ksql_truststore_storepass: "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}"
ksql_keystore_storepass: "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}"
ksql_keystore_keypass: "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else ksql_keystore_storepass }}"
ksql_ca_cert_path: "/var/ssl/private/ca.crt"
ksql_cert_path: "/var/ssl/private/ksql.crt"
ksql_key_path: "/var/ssl/private/ksql.key"
ksql_kafka_listener_name: internal
ksql:
  log4j_file: "/etc/ksqldb/ksql-server_log4j.properties"
  jaas_file: "/etc/ksqldb/ksql-server_jaas.conf"

ksql_jolokia_enabled: "{{jolokia_enabled}}"
ksql_jolokia_port: 7774
ksql_jolokia_ssl_enabled: "{{ ksql_ssl_enabled }}"

# Control Center Variables
control_center_user: "{{control_center_default_user}}"
control_center_group: "{{control_center_default_group}}"
control_center_port: 9021
control_center_listener_hostname: "0.0.0.0"
control_center_ssl_enabled: "{{ssl_enabled}}"
control_center_ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"
control_center_http_protocol: "{{ 'https' if control_center_ssl_enabled|bool else 'http' }}"
control_center_truststore_path: "/var/ssl/private/control_center.truststore.jks"
control_center_keystore_path: "/var/ssl/private/control_center.keystore.jks"
control_center_truststore_storepass: "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}"
control_center_keystore_storepass: "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}"
control_center_keystore_keypass: "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else control_center_keystore_storepass }}"
control_center_ca_cert_path: "/var/ssl/private/ca.crt"
control_center_cert_path: "/var/ssl/private/control_center.crt"
control_center_key_path: "/var/ssl/private/control_center.key"
control_center_kafka_listener_name: internal
control_center:
  log4j_file: /etc/confluent-control-center/control-center_log4j.properties

sasl_scram_users:
  admin:
    principal: admin
    password: admin-secret
  client:
    principal: client
    password: client-secret
  kafka_connect:
    principal: kafka_connect
    password: kafka_connect-secret
  control_center:
    principal: control_center
    password: control_center-secret
  kafka_rest:
    principal: kafka_rest
    password: kafka_rest-secret
  ksql:
    principal: ksql
    password: ksql-secret
  schema_registry:
    principal: schema_registry
    password: schema_registry-secret

sasl_plain_users:
  admin:
    principal: admin
    password: admin-secret
  client:
    principal: client
    password: client-secret
  kafka_connect:
    principal: kafka_connect
    password: kafka_connect-secret
  control_center:
    principal: control_center
    password: control_center-secret
  kafka_rest:
    principal: kafka_rest
    password: kafka_rest-secret
  ksql:
    principal: ksql
    password: ksql-secret
  schema_registry:
    principal: schema_registry
    password: schema_registry-secret

rbac_enabled: false
mds_acls_enabled: "{{rbac_enabled}}"
rbac_enabled_public_pem_path: /var/ssl/private/public.pem
rbac_enabled_private_pem_path: /var/ssl/private/tokenKeypair.pem

mds_ssl_enabled: "{{ssl_enabled}}"
mds_ssl_mutual_auth_enabled: "{{ssl_mutual_auth_enabled}}"
mds_http_protocol: "{{ 'https' if mds_ssl_enabled|bool else 'http' }}"
mds_port: 8090

create_mds_certs: "{{ rbac_enabled }}"
token_services_public_pem_file: generated_ssl_files/public.pem
token_services_private_pem_file: generated_ssl_files/tokenKeypair.pem

rbac_component_additional_system_admins: []
schema_registry_additional_system_admins: "{{rbac_component_additional_system_admins}}"
ksql_additional_system_admins: "{{rbac_component_additional_system_admins}}"
kafka_connect_additional_system_admins: "{{rbac_component_additional_system_admins}}"
control_center_additional_system_admins: "{{rbac_component_additional_system_admins}}"
