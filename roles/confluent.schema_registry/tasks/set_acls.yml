---
- name: Set Principal - Sasl Scram
  set_fact:
    schema_registry_principal: "{{ sasl_scram_users.schema_registry.principal }}"
  when: kafka_broker_listeners[schema_registry_kafka_listener_name]['sasl_protocol'] | normalize_sasl_protocol == 'SCRAM-SHA-256'

- name: Set Principal - Sasl Plain
  set_fact:
    schema_registry_principal: "{{ sasl_plain_users.schema_registry.principal }}"
  when: kafka_broker_listeners[schema_registry_kafka_listener_name]['sasl_protocol'] | normalize_sasl_protocol == 'PLAIN'

- name: Set Principal - Sasl Kerberos
  set_fact:
    schema_registry_principal: "{{ schema_registry_kerberos_principal }}"
    # schema_registry_principal: schemaregistry
    # TODO kerberos isnt working rn
  when: kafka_broker_listeners[schema_registry_kafka_listener_name]['sasl_protocol'] | normalize_sasl_protocol == 'GSSAPI'

- name: Extract Common Name from Keystore
  # Extract certs from keystore, get the subject line, pull out the CN, remove additional line after /
  shell: |
    keytool -list -keystore {{schema_registry_keystore_path}} \
        -storepass {{schema_registry_keystore_storepass}} -v \
        | grep Owner -m1 \
        | cut -d ":" -f2 \
        | tr -d '[:space:]'
  register: common_name_from_keystore
  when:
    - kafka_broker_listeners[schema_registry_kafka_listener_name]['sasl_protocol'] == 'none'
    - ssl_enabled|bool
    - ssl_mutual_auth_enabled|bool


# - name: Extract Common Name from Keystore
#   # Extract certs from keystore, get the subject line, pull out the CN, remove additional line after /
#   shell: |
#     openssl pkcs12 -nokeys -in {{schema_registry_keystore_path}} \
#         -passin pass:{{schema_registry_keystore_storepass}} \
#         | openssl x509 -noout -subject \
#         | sed -n "s/^.*CN=\(\S*\).*$/\1/p" \
#         | cut -d '/' -f1
#   register: common_name_from_keystore
#   when:
#     - kafka_broker_listeners[schema_registry_kafka_listener_name]['sasl_protocol'] == 'none'
#     - ssl_enabled|bool
#     - ssl_mutual_auth_enabled|bool

- name: Set Principal - SSL Mutual Auth
  set_fact:
    schema_registry_principal: "{{ common_name_from_keystore.stdout }}"
  when:
    - kafka_broker_listeners[schema_registry_kafka_listener_name]['sasl_protocol'] == 'none'
    - ssl_enabled|bool
    - ssl_mutual_auth_enabled|bool

- debug:
    msg: "Principal: {{schema_registry_principal}}"

- name: Create ACLS
  shell: |
    # kafka-cluster
    kafka-acls --authorizer-properties zookeeper.connect=localhost:2181 --add \
        --allow-principal User:{{ schema_registry_principal }} --allow-host '*' \
        --operation Describe --topic __consumer_offsets

    # __consumer_offsets
    kafka-acls --authorizer-properties zookeeper.connect=localhost:2181 --add \
        --allow-principal User:{{ schema_registry_principal }} --allow-host '*' \
        --operation Create --cluster kafka-cluster

    # kafkastore.topic
    kafka-acls --authorizer-properties zookeeper.connect=localhost:2181 --add \
        --allow-principal User:{{ schema_registry_principal }} --allow-host '*' \
        --producer --consumer --topic {{ schema_registry['properties']['kafkastore.topic'] }} --group schema-registry

    kafka-acls --authorizer-properties zookeeper.connect=localhost:2181 --add \
        --allow-principal User:{{ schema_registry_principal }} --allow-host '*' \
        --operation DescribeConfigs --topic {{ schema_registry['properties']['kafkastore.topic'] }}

    # _schemas_acl
    kafka-acls --authorizer-properties zookeeper.connect=localhost:2181 --add \
        --allow-principal User:{{ schema_registry_principal }} --allow-host '*' \
        --producer --consumer --topic _schemas_acl --group schema-registry

    kafka-acls --authorizer-properties zookeeper.connect=localhost:2181 --add \
        --allow-principal User:{{ schema_registry_principal }} --allow-host '*' \
        --operation DescribeConfigs --topic _schemas_acl
  delegate_to: "{{ groups['zookeeper'][0] }}"
  run_once: true
