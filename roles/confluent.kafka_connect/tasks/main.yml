---
# - include_role:
#     name: confluent.common
#   when: not common_role_completed|bool
#
# # Install Packages
# - name: Install the Kafka Connect Packages
#   yum:
#     name: "{{item}}{{confluent_package_redhat_suffix}}"
#     state: latest
#   loop: "{{kafka_connect_packages}}"
#   when: ansible_os_family == "RedHat"
#
# - name: Install the Kafka Connect Packages
#   apt:
#     name: "{{item}}{{confluent_package_debian_suffix}}"
#   loop: "{{kafka_connect_packages}}"
#   when: ansible_os_family == "Debian"
#
# # Configure environment
# - name: Create Connect Distributed Group
#   group:
#     name: "{{kafka_connect.group}}"
#
# - name: Create Connect Distributed User
#   user:
#     name: "{{kafka_connect.user}}"
#     comment: "Connect Distributed User"
#     system: yes
#     group: "{{kafka_connect.group}}"
#
# - include_role:
#     name: confluent.ssl
#   vars:
#     truststore_storepass: "{{kafka_connect_truststore_storepass}}"
#     truststore_path: "{{kafka_connect_truststore_path}}"
#     keystore_path: "{{kafka_connect_keystore_path}}"
#     keystore_storepass: "{{kafka_connect_keystore_storepass}}"
#     keystore_keypass: "{{kafka_connect_keystore_keypass}}"
#     service_name: kafka_connect
#     hostnames: "{{ [inventory_hostname] }}"
#   when: kafka_connect_ssl_enabled|bool or kafka_broker_listeners[kafka_connect_kafka_listener_name]['ssl_enabled'] | default(ssl_enabled) | bool
#
# - name: Configure Kerberos
#   include_role:
#     name: confluent.kerberos
#   vars:
#     kerberos_group: "{{kafka_connect.group}}"
#     kerberos_user: "{{kafka_connect.user}}"
#     kerberos_keytab_path: "{{kafka_connect_kerberos_keytab_path}}"
#     kerberos_handler: "restart connect distributed"
#   when: kafka_broker_listeners[kafka_connect_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'GSSAPI'
#
# # RBAC/ACLs Configuration
#
# # TODO move into the ssl role, this is duplicating code
# - name: Copy in public pem files
#   copy:
#     src: "{{rbac_public_pem_file}}"
#     dest: /var/ssl/private/public.pem
#     mode: '755'
#     owner: "{{kafka_connect.user}}"
#     group: "{{kafka_connect.group}}"
#   when: rbac_enabled|bool or acls_enabled|bool

### REMOVING THIS
# - name: Get Kafka Cluster ID
#   include_tasks: tasks/get_cluster_id.yml
#   when: rbac_enabled|bool or acls_enabled|bool

# TODO deeper investigation into what the principals are!
- set_fact:
    kafka_connect_principal: kafka_connect

- name: Create Centralized ACLS
  include_tasks: tasks/acls.yml
  vars:
    principal: "{{kafka_connect_principal}}"
    acls_list: "{{kafka_connect_acls}}"
  when: acls_enabled|bool

- name: Login to MDS to get Security Token
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  delegate_facts: true
  shell: |
    curl -u "{{rbac_broker_admin}}":"{{rbac_broker_admin_password}}" -s http://localhost:8090/security/1.0/authenticate 2> /dev/null | grep auth_token | jq -r .auth_token
  register: rbac_token
  when: rbac_enabled|bool

## Configure users for RBAC with MTLS and self signed certificates

- name: Grant role Security Admin to Connect user
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  delegate_facts: true
  shell: |
    curl -X POST http://{{ groups['kafka_broker'][0] }}:8090/security/1.0/principals/User:{{inventory_hostname}}/roles/SecurityAdmin -H "accept: application/json" -H "Authorization: Bearer {{rbac_token.stdout}}" -H "Content-Type: application/json" -d '{"clusters":{"kafka-cluster":"{{cluster_id.stdout}}","connect-cluster":"connect-cluster"}}'
  when: (rbac_enabled|bool and ssl_enabled|bool) and not (ssl_custom_certs|bool)

- name: Grant Connect user ResourceOwner on the group that Connect nodes use to coordinate across the cluster
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  delegate_facts: true
  shell: |
    curl -X POST http://{{ groups['kafka_broker'][0] }}:8090/security/1.0/principals/User:{{inventory_hostname}}/roles/ResourceOwner/bindings -H "accept: application/json" -H "Authorization: Bearer {{rbac_token.stdout}}" -H "Content-Type: application/json" -d '{"scope":{"clusters":{"kafka-cluster":"{{cluster_id.stdout}}"}},"resourcePatterns":[{"resourceType":"Group","name":"connect-cluster","patternType":"LITERAL"}]}'
  when: (rbac_enabled|bool and ssl_enabled|bool) and not (ssl_custom_certs|bool)

- name: Grant Connect ResourceOwner on the Config topic where Connect configs are stored
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  delegate_facts: true
  shell: |
    curl -X POST http://{{ groups['kafka_broker'][0] }}:8090/security/1.0/principals/User:{{inventory_hostname}}/roles/ResourceOwner/bindings -H "accept: application/json" -H "Authorization: Bearer {{rbac_token.stdout}}" -H "Content-Type: application/json" -d '{"scope":{"clusters":{"kafka-cluster":"{{cluster_id.stdout}}"}},"resourcePatterns":[{"resourceType":"Topic","name":"connect-configs","patternType":"LITERAL"}]}'
  when: (rbac_enabled|bool and ssl_enabled|bool) and not (ssl_custom_certs|bool)

- name: Grant Connect ResourceOwner on the offset storage topic
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  delegate_facts: true
  shell: |
    curl -X POST http://{{ groups['kafka_broker'][0] }}:8090/security/1.0/principals/User:{{inventory_hostname}}/roles/ResourceOwner/bindings -H "accept: application/json" -H "Authorization: Bearer {{rbac_token.stdout}}" -H "Content-Type: application/json" -d '{"scope":{"clusters":{"kafka-cluster":"{{cluster_id.stdout}}"}},"resourcePatterns":[{"resourceType":"Topic","name":"connect-offsets","patternType":"LITERAL"}]}'
  when: (rbac_enabled|bool and ssl_enabled|bool) and not (ssl_custom_certs|bool)

- name: Grant Connect ResourceOwner on the offset status topic
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  delegate_facts: true
  shell: |
    curl -X POST http://{{ groups['kafka_broker'][0] }}:8090/security/1.0/principals/User:{{inventory_hostname}}/roles/ResourceOwner/bindings -H "accept: application/json" -H "Authorization: Bearer {{rbac_token.stdout}}" -H "Content-Type: application/json" -d '{"scope":{"clusters":{"kafka-cluster":"{{cluster_id.stdout}}"}},"resourcePatterns":[{"resourceType":"Topic","name":"connect-status","patternType":"LITERAL"}]}'
  when: (rbac_enabled|bool and ssl_enabled|bool) and not (ssl_custom_certs|bool)

## Configure users for RBAC with MTLS and custom certificates

- name: Grant role Security Admin to Connect user
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  delegate_facts: true
  shell: |
    curl -X POST http://{{ groups['kafka_broker'][0] }}:8090/security/1.0/principals/User:{{rbac_principal_name}}/roles/SecurityAdmin -H "accept: application/json" -H "Authorization: Bearer{{rbac_token.stdout}}" -H "Content-Type: application/json" -d '{"clusters":{"kafka-cluster":"{{cluster_id.stdout}}","connect-cluster":"connect-cluster"}}'
  when: rbac_enabled|bool and ssl_enabled|bool and ssl_custom_certs|bool

- name: Grant Connect user ResourceOwner on the group that Connect nodes use to coordinate across the cluster
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  delegate_facts: true
  shell: |
    curl -X POST http://{{ groups['kafka_broker'][0] }}:8090/security/1.0/principals/User:{{rbac_principal_name}}/roles/ResourceOwner/bindings -H "accept: application/json" -H "Authorization: Bearer {{rbac_token.stdout}}" -H "Content-Type: application/json" -d "{"scope":{"clusters":{"kafka-cluster":"{{cluster_id.stdout}}"}},"resourcePatterns":[{"resourceType":"Group","name":"connect-cluster","patternType":"LITERAL"}]}"
  when: rbac_enabled|bool and ssl_enabled|bool and ssl_custom_certs|bool

- name: Grant Connect ResourceOwner on the Config topic where Connect configs are stored
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  delegate_facts: true
  shell: |
    curl -X POST http://{{ groups['kafka_broker'][0] }}:8090/security/1.0/principals/User:{{rbac_principal_name}}/roles/ResourceOwner/bindings -H "accept: application/json" -H "Authorization: Bearer {{rbac_token.stdout}}" -H "Content-Type: application/json" -d "{"scope":{"clusters":{"kafka-cluster":"{{cluster_id.stdout}}"}},"resourcePatterns":[{"resourceType":"Topic","name":"connect-configs","patternType":"LITERAL"}]}"
  when: rbac_enabled|bool and ssl_enabled|bool and ssl_custom_certs|bool

- name: Grant Connect ResourceOwner on the offset storage topic
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  delegate_facts: true
  shell: |
    curl -X POST http://{{ groups['kafka_broker'][0] }}:8090/security/1.0/principals/User:{{rbac_principal_name}}/roles/ResourceOwner/bindings -H "accept: application/json" -H "Authorization: Bearer {{rbac_token.stdout}}" -H "Content-Type: application/json" -d "{"scope":{"clusters":{"kafka-cluster":"{{cluster_id.stdout}}"}},"resourcePatterns":[{"resourceType":"Topic","name":"connect-offsets","patternType":"LITERAL"}]}"
  when: rbac_enabled|bool and ssl_enabled|bool and ssl_custom_certs|bool

- name: Grant Connect ResourceOwner on the offset status topic
  delegate_to: "{{ groups['kafka_broker'][0] }}"
  delegate_facts: true
  shell: |
    curl -X POST http://{{ groups['kafka_broker'][0] }}:8090/security/1.0/principals/User:{{rbac_principal_name}}/roles/ResourceOwner/bindings -H "accept: application/json" -H "Authorization: Bearer {{rbac_token.stdout}}" -H "Content-Type: application/json" -d "{"scope":{"clusters":{"kafka-cluster":"{{cluster_id.stdout}}"}},"resourcePatterns":[{"resourceType":"Topic","name":"connect-status","patternType":"LITERAL"}]}"
  when: rbac_enabled|bool and ssl_enabled|bool and ssl_custom_certs|bool

- name: Remove exported pem file for MDS login
  file:
     path: /var/ssl/private/kafka_broker_keystore.pem
     state: absent
  when: rbac_enabled|bool and ssl_enabled|bool

- name: Create Connect Distributed Config
  template:
    src: connect-distributed.properties.j2
    dest: "{{kafka_connect.config_file}}"
    mode: 0640
    owner: "{{kafka_connect.user}}"
    group: "{{kafka_connect.group}}"
  notify:
    - restart connect distributed

- name: Create Logs Directory
  file:
    path: "{{kafka_connect.appender_log_path}}"
    state: directory
    group: "{{kafka_connect.group}}"
    owner: "{{kafka_connect.user}}"
    mode: '764'

- name: Create Connect Distributed log4j Config
  template:
    src: connect_distributed_log4j.properties.j2
    dest: "{{kafka_connect.log4j_file}}"
    mode: 0640
    owner: "{{kafka_connect.user}}"
    group: "{{kafka_connect.group}}"
  notify:
    - restart connect distributed

- name: Create Service Override Directory
  file:
    path: "{{kafka_connect.systemd_override | dirname}}"
    owner: "{{kafka_connect.user}}"
    group: "{{kafka_connect.group}}"
    state: directory
    mode: 0640

- name: Write Service Overrides
  template:
    src: override.conf.j2
    dest: "{{ kafka_connect.systemd_override }}"
    mode: 0640
    owner: "{{kafka_connect.user}}"
    group: "{{kafka_connect.group}}"
  notify:
    - reload systemd
    - restart connect distributed

- name: Certs were Updated - Trigger Restart
  command: /bin/true
  notify: restart connect distributed
  when: certs_updated|bool

- meta: flush_handlers

- name: Start Connect Service
  systemd:
    name: "{{kafka_connect_service_name}}"
    enabled: yes
    state: started

- name: Health Check
  include_tasks: health_check.yml
  when:
    - health_checks_enabled|bool
    - not ansible_check_mode
