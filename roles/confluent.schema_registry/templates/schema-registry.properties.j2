# Maintained by Ansible
{% for key, value in schema_registry.properties.items() %}
{{key}}={{value}}
{% endfor %}

# Schema Registry Configuration
listeners={{schema_registry_http_protocol}}://0.0.0.0:{{schema_registry_listener_port}}
host.name={{inventory_hostname}}
inter.instance.protocol={{schema_registry_http_protocol}}
{% if schema_registry_ssl_enabled|bool %}
security.protocol=SSL
ssl.keystore.location={{schema_registry_keystore_path}}
ssl.keystore.password={{schema_registry_keystore_storepass}}
ssl.key.password={{schema_registry_keystore_keypass}}
{% if schema_registry_ssl_mutual_auth_enabled|bool %}
ssl.truststore.location={{schema_registry_truststore_path}}
ssl.truststore.password={{schema_registry_truststore_storepass}}
ssl.client.auth=false
#Set to true if you wish to force Client SSL Authentication
{% endif %}
{% endif %}

# Kafka Broker Configuration
kafkastore.bootstrap.servers={% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}{{ host }}:{{kafka_broker_listeners[schema_registry_kafka_listener_name]['port']}}{% endfor %}

kafkastore.security.protocol={{kafka_broker_listeners[schema_registry_kafka_listener_name] | kafka_protocol_defaults(sasl_protocol, ssl_enabled) }}
{% if kafka_broker_listeners[schema_registry_kafka_listener_name]['ssl_enabled'] | default(ssl_enabled) | bool %}
kafkastore.ssl.truststore.location={{schema_registry_truststore_path}}
kafkastore.ssl.truststore.password={{schema_registry_truststore_storepass}}
{% if kafka_broker_listeners[schema_registry_kafka_listener_name]['ssl_mutual_auth_enabled'] | default(ssl_mutual_auth_enabled) | bool %}
kafkastore.ssl.keystore.location={{schema_registry_keystore_path}}
kafkastore.ssl.keystore.password={{schema_registry_keystore_storepass}}
kafkastore.ssl.key.password={{schema_registry_keystore_keypass}}
{% endif %}
{% endif %}
{% if kafka_broker_listeners[schema_registry_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'PLAIN' %}
kafkastore.sasl.mechanism=PLAIN
kafkastore.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required \
   username="{{sasl_plain_users.schema_registry.principal}}" password="{{sasl_plain_users.schema_registry.password}}";
{% endif %}
{% if kafka_broker_listeners[schema_registry_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'GSSAPI' %}
kafkastore.sasl.mechanism=GSSAPI
kafkastore.sasl.kerberos.service.name={{kerberos_kafka_broker_primary}}
kafkastore.sasl.jaas.config=com.sun.security.auth.module.Krb5LoginModule required \
   useKeyTab=true \
   storeKey=true \
   keyTab="{{kerberos.keytab_dir}}/{{schema_registry_kerberos_keytab_path | basename}}" \
   principal="{{schema_registry_kerberos_principal}}";
{% endif %}
{% if kafka_broker_listeners[schema_registry_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'SCRAM-SHA-256' %}
kafkastore.sasl.mechanism=SCRAM-SHA-256
kafkastore.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required \
   username="{{sasl_scram_users.schema_registry.principal}}" password="{{sasl_scram_users.schema_registry.password}}";
{% endif %}

{% if rbac_enabled|bool %}
##################### RBAC #####################
# These properties install the Schema Registry security plugin, and configure it to use RBAC for
# authorization and OAuth for authentication

# WHEN RBAC IS ENABLED, ZK CONNECTION IS NEEDED FOR LICENSE
kafkastore.connection.url={% for host in groups['zookeeper'] %}{% if loop.index > 1%},{% endif %}{{ host }}:{{zookeeper.properties.clientPort}}{% endfor %}


schema.registry.resource.extension.class=io.confluent.kafka.schemaregistry.security.SchemaRegistrySecurityResourceExtension
confluent.schema.registry.authorizer.class=io.confluent.kafka.schemaregistry.security.authorizer.rbac.RbacAuthorizer
rest.servlet.initializor.classes=io.confluent.common.security.jetty.initializer.InstallBearerOrBasicSecurityHandler
confluent.schema.registry.auth.mechanism=JETTY_AUTH

# location of metadata service
confluent.metadata.bootstrap.server.urls={% for host in groups['kafka_broker'] %}{% if loop.index > 1%},{% endif %}http://{{ host }}:8090{% endfor %}

# credentials to use with MDS
confluent.metadata.http.auth.credentials.provider=BASIC
{% if rbac_enabled|bool and ssl_enabled|bool %}
confluent.metadata.basic.auth.user.info={{ inventory_hostname }}:{{ rbac_principal_password }}
{% endif %}
{% if rbac_enabled|bool and ssl_enabled|bool and ssl_custom_certs|bool %}
confluent.metadata.basic.auth.user.info={{ rbac_principal_name }}:{{ rbac_principal_password }}
{% endif %}
# path to a public key that should be used to verify json web tokens during authentication
public.key.path=/var/ssl/private/public.pem

authentication.roles=**

{% endif %}
